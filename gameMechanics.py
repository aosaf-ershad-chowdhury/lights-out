# Contains all the functions which determines the
# internal mechanics of the game

# os is used for clearing terminal
# time is used for the timings and animation effects


import os
import time


def extractUserDetails(userName):
    # Given a username as a parameter, this function
    # will extract the relevant level Details

    accountFile = open('userAccount.txt','r')
    accountFileContents = accountFile.readlines()
    
    for line in accountFileContents:
        currentUser = list(line.split())
        if currentUser != "[]" and currentUser != "['\n']":
            if currentUser[0] == userName:
                userDetails = currentUser[2::]
                detail = {} # All the details will be stored in a dictionary

                for level in userDetails:
                    levelInfo = level.split("-")
                    detail[levelInfo[0]] = levelInfo[1]

                return detail


def readMap(mapName):
    # Given a particular file name, this function
    # reads the relevant file and returns a 2D
    # array containing the board

    currentMap = []
    
    with open(mapName) as currentFile:
        for line in currentFile:
            currentMap.append(list(line)[:-1]) # Last character to be excluded

    return currentMap


def checkMove(moveX, moveY, currentBoard):
    # It checks whether the move is valid
    # Returns 0 if move is out of index or is invalid some other way
    # Returns 2 if the move is placed on a wall
    # Returns 1 if input is valid

    try:
        # 1 is subtracted because of the difference
        # between coordinates and index
        if moveX - 1 < 0 or moveY - 1 < 0:
            return 0 
        if currentBoard[moveX-1][moveY-1] == "X":
            return 2
        return 1
    except:
        return 0


def flipTile(moveX, moveY, currentBoard):
    # Flips the light of the current tile

    if currentBoard[moveX][moveY] == '0':
        currentBoard[moveX][moveY] = '1'
    else:
        currentBoard[moveX][moveY] = '0'


def makeMove(moveX, moveY, currentBoard):
    # When a user enters the coordinates, the corresponding
    # lights and the adjacent lights must be flipped using 
    # this function
    
    flipTile(moveX, moveY, currentBoard) # Flips current light
    if moveX - 1 >= 0 and currentBoard[moveX-1][moveY] != "X":
        flipTile(moveX-1, moveY, currentBoard) # Flips light to the left
    if moveX + 1 < len(currentBoard) and currentBoard[moveX+1][moveY] != "X":
        flipTile(moveX+1, moveY, currentBoard) #Flips light to the right
    if moveY - 1 >= 0 and currentBoard[moveX][moveY-1] != "X":
        flipTile(moveX, moveY-1, currentBoard) # Flips light directly below
    if moveY + 1 < len(currentBoard[0]) and currentBoard[moveX][moveY+1] != "X":
        flipTile(moveX, moveY+1, currentBoard) # Flips light directly above


def checkEndGame(currentBoard):
    # Checks if all lights are off

    for row in currentBoard:
        for item in row:
            if item != "X" and item != "0":
                return False
    return True


def updateUserDetails(username, mapName, mapValue):
    # This function was partially generated by ChatGPT
    # Changes we made reflecting our own file format

    # Open the file in read mode
    with open("userAccount.txt", "r") as file:
        lines = file.readlines()

    # Open the file in write mode
    with open("userAccount.txt", "w") as file:
        for line in lines:
            # Extract the username from the line
            current_username = line.split()[0]

            if current_username == username:
                # Update the details for the specified username
                userPassword = line.split()[1]
                part1 = " ".join(list(line.split())[2:int(mapName)+1])
                part2 = " ".join(list(line.split())[int(mapName)+2:])

                updated_line = f"{username} {userPassword} {part1} {mapName}-{mapValue} {part2}\n"
                file.write(updated_line)
            else:
                # Write the line as it is if the username doesn't match
                file.write(line)
